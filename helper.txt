"Creating a New Project"

django-admin startproject projectname

cd password_generate -- даст доступ к папке проекта , после команда ls покажет имеющиеся файлы в датабейс

python manage.py runserver -- запускает сервер если дериктория в папке (если нажать контрол-с, то серверс упадет)

python manage.py startapp appname -- создает приложение( создается новая папка "appname "),дальше нужно вписать название приложения в
коренной папке-> setting -> INSTALLED_APPS (урок 3.6)

python manage.py migrate - подтвержение миграций

python manage.py makemigrations - сохранение миграций после изменений(н.р изменение в моделс)

__________________________________________________________________________________________________________________________
урок 3.7 работали с urls.py.В файл urls.py импортировали from generator import views(одно из файлов .ру).В файле views прописали две функции
views.py - визуальная часть сайта
def home(request):
    return HttpResponse('Hello dear friend') и

def eggs(requests):
    return HttpResponse('<h1>Ur eggs is big</h1>') ,которые возвращают строчки в формате HttpResponse(иначе джанга ругается,
только хттп можно)

Написали в листе urlpatterns = [
    path('', views.home),
    path('eggs', views.eggs),
]
Это значит что при обращении к localhost:8000 откроется страница сайта на которой написано содержимое функции home ,а при обращении к localhost:8000/eggs - содержимое функции eggs
__________________________________________________________________________________________________________________________
3.8 Шаблоны (Templates)
В папке generator создаем папку templates в которой создаем папку generator, итоговая директория будет выглядеть следующим образом C:\Users\tessl\Desktop\password_generate-project\generator\templates\generator>

Создаем в папке конечной папке generator новый файл (home.html) в котором прописываем This is the new homepage

Дальше в файле views в функции home в строке return с помощью импротированной дефолтной библиотеки джанго используем метод render ,который принимает request, дерикторию созданного файла generator/home.html и создаем словарь с ключем 'password' : 'hyevi1uparol23' , таким образом функция хом имеет вид;
 
	def home(request):
    	   return render(request, 'generator/home.html', {'password': 'hyevi1uparol23'})

Далее в файле home.html новую строку {{ password }} и файл будет выглядеть следующим образом:
<h2>This is the new homepage</h2>

{{ password }}

Подведем итог, файл urls использую строку urlpatterns = [
    path('', views.home),
    path('eggs', views.eggs),
]  открывает файл views и используя оттуда функцию home, которая в свою очередь отправляет нас в файл home.html берет оттуда инфу
и распечатывает на сайте,в файле по ключу password он идет обратно в функцию home и из словаря берет значение. Вот блять както так
__________________________________________________________________________________________________________________________
Домашняя работа

Чтобы создать новую страницу сайта нужно:
1 - создаем в папке templates файл (f.e- creator_information.html)
2 - создаем функцию creator(request), которая возвращает render(request, 'generator/creator.html' -путь файла созданного ранее)
3 - в urls.py в списке urlpatterns добавляем новый path('creatorpage', views.creator, name='creator_information')
_________________________________________________________________
5.5 Отображение страницы
Это будет полезно если мы работаем с большим количеством приложений(portfolio, blog)

в папке с основным urls.py в urlpatterns нужно прописать 
	path('blog/', include('blog.urls')), а чтобы работало includ нужно его импортировать
ИМпорт выглядит так:
	from django.urls import path, include

Дальше в папке блог создаем fail - urls.py 
Он будет выглядеть так:

from django.urls import path
from . import views -- точку указываем потмоу что файил views находится в той же папке 

urlpatterns = [
    path('', views.all_blogs, name='all_blogs'), - тут все понятно

]
_____________________________________________________________________________________________________
чтобы создать новый раздел в джанго админке нужно:
В файле model.py создать новый класс, по наименованию приложения который нужно унаследовать от класа model.Model
определить в нем атрибуты (в нашем случае name, descriptio, date)
В итоге наш класс будет выглядеть таким образом :

from django.db import models


class Blog(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField()
    date = models.DateField()
После изменений нужно сохранить миграции
python manage.py makemigrations

python manage.py migrate 

Дальше заходи в файл админки admin.py
Импортируем из модел, которая находится в нашей папке blog калсс Blog
from .models import Blog

и прописываем строчку

admin.site.register(Blog)

После этого идем в файл views и прописываем функцию all_blogs а также импортируем класс Blog из моделс.пу

from .models import Blog


def all_blogs(request):
    blogs = Blog.objects.order_by('-date')[:5] - эта записать означает что, на старнице нашехо блога будут отображаться последние 5 записией отсортированные по времени
    return render(request, 'blog/all_blogs.html', {'blogs': blogs})- тут все понятно

прописываем html, css

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
<div class="container text-center">
    <h1>Its my project blogs</h1>


</div>
{% for blog in blogs %} - цикл фор на хтмл языке

<h2>{{ blog.name }}</h2>

<p>{{ blog.description }}</p>
<p>{{ blog.date }}</p>




{% endfor %}
________________________________________________________________________
5.9 Статические файлы static
В папке portfolio создаем новые папки /static/portfolio и внутри этой папки будут содержаться файлы
с фотографиями

Дальше в home.html прописываем 

{% load static%} - это нужно добавлять всегда, когда мы работаем со статическими файлами

<img src="{% static 'portfolio/IMG_8320.PNG' %}"> - путь нашей папки

_________________________________________________________________________________________
5.10 (Detail)
Добавляем отображение блога по их номеру
В файле views (blog) определяем новую функцию - detail, которая выглядит следующим образом 

def detail(request, blog_id):
    blog = get_object_or_404(Blog, pk=blog_id) - pk это ключ для баз данных, Blog наш класс 
    return render(request, 'blog/detail.html', {'blog': blog}) - нужно создать html файл, который имеет путь

'blog/detail.html' , и словарь 

дальше перейти в fail urls.py (blog-app) и передлать его 

app_name = 'blog'

а также добавить urlpatterns =[
path('<int:blog_id>/', views.detail, name='detail')
] где. '<int:blog_id>/' - число которое будет отсылаться к номеру блога по дате ( у нас их всего 5)

и остаеться изменить html файл прописав в нем
{{ blog.name }}
____________________________________________________________________________
5.11 Полировка

В faile all_blogs прописываем:

<h2>Author has written {{blogs.count}} blog{{blogs.count|pluralize}}</h2>
{% for blog in blogs %}

где blog.count будет выдавать количество блогов написаных нами а {blogs.count|pluralize} - будет менять значение в зависимости от числа блогов (blog or blogs)

<p>{{ blog.date|date:'M d Y'|upper }}</p> - это параметры даты 

<p>{{ blog.description|striptags|truncatechars:100 }}</p> 
где truncatechars:100 - это краткое описание блога
striptags - скроет хтмл теги.

Переходим в файл detail
и дописываем эти строчки 

<h2>--{{ blog.date|date:'F jS Y' }}--</h2>
jS - делает окончания даты

{{ blog.description|safe }}  
safe - применяет хтмл теги
________________________________________________________________________________
python anywhere(Запускаем сайт на сервере)

Заходим в стоку баш на питонэнивер

делаем клон нашего веб сервиса с гита



git clone https://github.com/Roman-Zhirovskis/django4_personal_portfolio.git

далее в дериктории нашего проекта создаем виртуальное окружение

mkvirtualenv --python=/usr/bin/python3.8 portfoliovenv (самая последняя версия питона на сайте 3.9)

получаем такое сообщение

(portfoliovenv) 14:59 ~/django4_personal_portfolio (main)$ 

ТУт команда для возвращения в работу в окружении

workon portfoliovenv - начинает работу

deactivate - заверщает работу

Если забыли как называется окружение
	cd. vertualenv/

_______________________________________________________________________
7.3 Создание списка дел

Создали проект и создали приложение todo
Первое что нужно сделать создать страницу ввода. По юрл тегу signupuser прописываем вьвс.ру

Импортируем из джанго форму для регистрации пользователей:
from django.contrib.auth.forms import UserCreationForm


def signupuser(request):
    return render(request, 'todo/signupusers.html', {'form': UserCreationForm})



В темплейтс создаем папке тодо и файл signupuser
в котором пишем 
<h1>Sign Up</h1>

<form method="POST"> -- POST тоже самое что и гет, только работает с личнымии данныными

    {% csrf_token %} ----- важная хуйня безопасности 

{{form.as_p}} -- тут вывод формы, и еще разделили на строки для улучшения читаемости

<button type="submit">Sign UP</button> - просто кнопка, дальше будем ее использовать для входа

</form>

фывфывфывфыв
фывфыввыфв
































