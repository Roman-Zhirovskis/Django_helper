"Creating a New Project"

django-admin startproject projectname

cd password_generate -- даст доступ к папке проекта , после команда ls покажет имеющиеся файлы в датабейс

python manage.py runserver -- запускает сервер если дериктория в папке (если нажать контрол-с, то серверс упадет)

python manage.py startapp appname -- создает приложение( создается новая папка "appname "),дальше нужно вписать название приложения в
коренной папке-> setting -> INSTALLED_APPS (урок 3.6)

python manage.py migrate - подтвержение миграций

python manage.py makemigrations - сохранение миграций после изменений(н.р изменение в моделс)

__________________________________________________________________________________________________________________________
урок 3.7 работали с urls.py.В файл urls.py импортировали from generator import views(одно из файлов .ру).В файле views прописали две функции
views.py - визуальная часть сайта
def home(request):
    return HttpResponse('Hello dear friend') и

def eggs(requests):
    return HttpResponse('<h1>Ur eggs is big</h1>') ,которые возвращают строчки в формате HttpResponse(иначе джанга ругается,
только хттп можно)

Написали в листе urlpatterns = [
    path('', views.home),
    path('eggs', views.eggs),
]
Это значит что при обращении к localhost:8000 откроется страница сайта на которой написано содержимое функции home ,а при обращении к localhost:8000/eggs - содержимое функции eggs
__________________________________________________________________________________________________________________________
3.8 Шаблоны (Templates)
В папке generator создаем папку templates в которой создаем папку generator, итоговая директория будет выглядеть следующим образом C:\Users\tessl\Desktop\password_generate-project\generator\templates\generator>

Создаем в папке конечной папке generator новый файл (home.html) в котором прописываем This is the new homepage

Дальше в файле views в функции home в строке return с помощью импротированной дефолтной библиотеки джанго используем метод render ,который принимает request, дерикторию созданного файла generator/home.html и создаем словарь с ключем 'password' : 'hyevi1uparol23' , таким образом функция хом имеет вид;
 
	def home(request):
    	   return render(request, 'generator/home.html', {'password': 'hyevi1uparol23'})

Далее в файле home.html новую строку {{ password }} и файл будет выглядеть следующим образом:
<h2>This is the new homepage</h2>

{{ password }}

Подведем итог, файл urls использую строку urlpatterns = [
    path('', views.home),
    path('eggs', views.eggs),
]  открывает файл views и используя оттуда функцию home, которая в свою очередь отправляет нас в файл home.html берет оттуда инфу
и распечатывает на сайте,в файле по ключу password он идет обратно в функцию home и из словаря берет значение. Вот блять както так
__________________________________________________________________________________________________________________________
Домашняя работа

Чтобы создать новую страницу сайта нужно:
1 - создаем в папке templates файл (f.e- creator_information.html)
2 - создаем функцию creator(request), которая возвращает render(request, 'generator/creator.html' -путь файла созданного ранее)
3 - в urls.py в списке urlpatterns добавляем новый path('creatorpage', views.creator, name='creator_information')
_________________________________________________________________
5.5 Отображение страницы
Это будет полезно если мы работаем с большим количеством приложений(portfolio, blog)

в папке с основным urls.py в urlpatterns нужно прописать 
	path('blog/', include('blog.urls')), а чтобы работало includ нужно его импортировать
ИМпорт выглядит так:
	from django.urls import path, include

Дальше в папке блог создаем fail - urls.py 
Он будет выглядеть так:

from django.urls import path
from . import views -- точку указываем потмоу что файил views находится в той же папке 

urlpatterns = [
    path('', views.all_blogs, name='all_blogs'), - тут все понятно

]
_____________________________________________________________________________________________________
чтобы создать новый раздел в джанго админке нужно:
В файле model.py создать новый класс, по наименованию приложения который нужно унаследовать от класа model.Model
определить в нем атрибуты (в нашем случае name, descriptio, date)
В итоге наш класс будет выглядеть таким образом :

from django.db import models


class Blog(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField()
    date = models.DateField()
После изменений нужно сохранить миграции
python manage.py makemigrations

python manage.py migrate 

Дальше заходи в файл админки admin.py
Импортируем из модел, которая находится в нашей папке blog калсс Blog
from .models import Blog

и прописываем строчку

admin.site.register(Blog)

После этого идем в файл views и прописываем функцию all_blogs а также импортируем класс Blog из моделс.пу

from .models import Blog


def all_blogs(request):
    blogs = Blog.objects.order_by('-date')[:5] - эта записать означает что, на старнице нашехо блога будут отображаться последние 5 записией отсортированные по времени
    return render(request, 'blog/all_blogs.html', {'blogs': blogs})- тут все понятно

прописываем html, css

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
<div class="container text-center">
    <h1>Its my project blogs</h1>


</div>
{% for blog in blogs %} - цикл фор на хтмл языке

<h2>{{ blog.name }}</h2>

<p>{{ blog.description }}</p>
<p>{{ blog.date }}</p>




{% endfor %}
________________________________________________________________________
5.9 Статические файлы static
В папке portfolio создаем новые папки /static/portfolio и внутри этой папки будут содержаться файлы
с фотографиями

Дальше в home.html прописываем 

{% load static%} - это нужно добавлять всегда, когда мы работаем со статическими файлами

<img src="{% static 'portfolio/IMG_8320.PNG' %}"> - путь нашей папки

_________________________________________________________________________________________
5.10 (Detail)
Добавляем отображение блога по их номеру
В файле views (blog) определяем новую функцию - detail, которая выглядит следующим образом 

def detail(request, blog_id):
    blog = get_object_or_404(Blog, pk=blog_id) - pk это ключ для баз данных, Blog наш класс 
    return render(request, 'blog/detail.html', {'blog': blog}) - нужно создать html файл, который имеет путь

'blog/detail.html' , и словарь 

дальше перейти в fail urls.py (blog-app) и передлать его 

app_name = 'blog'

а также добавить urlpatterns =[
path('<int:blog_id>/', views.detail, name='detail')
] где. '<int:blog_id>/' - число которое будет отсылаться к номеру блога по дате ( у нас их всего 5)

и остаеться изменить html файл прописав в нем
{{ blog.name }}
____________________________________________________________________________
5.11 Полировка

В faile all_blogs прописываем:

<h2>Author has written {{blogs.count}} blog{{blogs.count|pluralize}}</h2>
{% for blog in blogs %}

где blog.count будет выдавать количество блогов написаных нами а {blogs.count|pluralize} - будет менять значение в зависимости от числа блогов (blog or blogs)

<p>{{ blog.date|date:'M d Y'|upper }}</p> - это параметры даты 

<p>{{ blog.description|striptags|truncatechars:100 }}</p> 
где truncatechars:100 - это краткое описание блога
striptags - скроет хтмл теги.

Переходим в файл detail
и дописываем эти строчки 

<h2>--{{ blog.date|date:'F jS Y' }}--</h2>
jS - делает окончания даты

{{ blog.description|safe }}  
safe - применяет хтмл теги
________________________________________________________________________________
python anywhere(Запускаем сайт на сервере)

Заходим в стоку баш на питонэнивер

делаем клон нашего веб сервиса с гита



git clone https://github.com/Roman-Zhirovskis/django4_personal_portfolio.git

далее в дериктории нашего проекта создаем виртуальное окружение

mkvirtualenv --python=/usr/bin/python3.8 portfoliovenv (самая последняя версия питона на сайте 3.9)

получаем такое сообщение

(portfoliovenv) 14:59 ~/django4_personal_portfolio (main)$ 

ТУт команда для возвращения в работу в окружении

workon portfoliovenv - начинает работу

deactivate - заверщает работу

Если забыли как называется окружение
	cd. vertualenv/

_______________________________________________________________________
7.3 Создание списка дел

Создали проект и создали приложение todo
Первое что нужно сделать создать страницу ввода. По юрл тегу signupuser прописываем вьвс.ру

Импортируем из джанго форму для регистрации пользователей:
from django.contrib.auth.forms import UserCreationForm


def signupuser(request):
    return render(request, 'todo/signupusers.html', {'form': UserCreationForm})



В темплейтс создаем папке тодо и файл signupuser
в котором пишем 
<h1>Sign Up</h1>

<form method="POST"> -- POST тоже самое что и гет, только работает с личнымии данныными

    {% csrf_token %} ----- важная хуйня безопасности 

{{form.as_p}} -- тут вывод формы, и еще разделили на строки для улучшения читаемости

<button type="submit">Sign UP</button> - просто кнопка, дальше будем ее использовать для входа

</form>
________________________________________________________________________________________
7.4
Создание пользователя
файл views.py разделяем создание пользователя и аутентификацию

from django.contrib.auth.models import User - омпортируем джанго библиотеку для работы с пользователями

в перемнной def signupuser пишем следующее

    if request.method == 'GET': - значит что пользователь получает гет запрос, и получает форму регистрации
        return render(request, 'todo/signupusers.html', {'form': UserCreationForm})


    else:
        if request.POST['password1'] == request.POST['password2']: - проверяяет совпадение пароля
            user = User.objects.create_user(request.POST['username'], password=request.POST['password1'])
            user.save() - сохраянет юзера и регистрирует его
        else:
            print('hello') - дальше ничего не написали пока


{----------код урока выглядит так--------------
from django.contrib.auth.models import User


def signupuser(request):
    if request.method == 'GET':
        return render(request, 'todo/signupusers.html', {'form': UserCreationForm})
    else:
        if request.POST['password1'] == request.POST['password2']:
            user = User.objects.create_user(request.POST['username'], password=request.POST['password1'])
            user.save()
        else:
            print('hello')

}

_____________________________________________________________________________________________________________________________
7.5 Обработка ошибок при регистарции

Для начала нужно создать строку в urlpaths в файле urls.py

# ToDos
    path('current/', views.currenttodos, name='currenttodos'), импортировать инчего не нужно, так как мы новую функцию прописываем в файле views, который находится в приложении TODO

нужно создать в темплейтс хтмл файл, все по стандарту

Дальше в файле views прописываем функцию для current,на которую будет переводить приложение после успешной регистрации на сайте

Работа в def signupuser:

Перед этим ипортируем следующие библиотеки:

from django.shortcuts import render, redirect
from django.db import IntegrityError
from django.contrib.auth import login

def signupuser
	....
        if request.POST['password1'] == request.POST['password2']:
            try:
                user = User.objects.create_user(request.POST['username'], password=request.POST['password1']) - создает юзера
,который успешно залогинился
                user.save() - сохраняет его
                login(request, user) - хуй знает что делает, автор не объяснил, а я и не понял
                return redirect('currenttodos') - тут понял, она перенаправляет на указанную страницу

            except IntegrityError: -- Обработка исключения, при создании пользователя и при уже имеющемся име пользователя
                return render(request,
                              'todo/signupusers.html', 
                              {'form': UserCreationForm(),
                               'error': 'That username has already been taken.Pleas choose another username'})-
		- возвращает на страинцу регистрации и пишет ошибку
		
        else: -- тут ошибка не совпадения пароля и его повторного ввода
            return render(request, 'todo/signupusers.html',
                          {'form': UserCreationForm(), 'error': 'Password didnt mach'})

	....
_________________________________________________________________________________________
7.6 Отображение статуса юзера

Напишем базовый хьмл для отображения на всех старницах проекта


{% if user.is_authenticated %} -- показывает зарегестрирован ли юзер

Logged In as {{ user.username }} - если да, то отображает его имя

<a href="#">Logout</a>  - кнопка для разавторизации
{% else %} -- если нет, то не написали еще код

<a href="#">SignUp</a>
<a href="#">Login</a>


{% endif %} -- закрывает блок иф (дурацкий хтмл)

{% block content %}	- как в предыдущем проекте, базовый блок
{% endblock %}

Переходим файл currenttodos.html - там у нас страница на которую попадает пользователь, после регистрации

{% extends 'todo/base.html' %}-- сделали привязку к блоку в базе.хтмл

{% block content %}

Current

{% endblock %}

А также сделаем отображение о том что юзер вошел в signupusers.html

{% extends 'todo/base.html' %}


{% block content %}
....... -     		тут код который был до этого в этом файле
{% endblock %}

Короткий урок, работали только в хтмл
_______________________________________________________________________________
7.7 Выход пользователя

в файле urls.py прописываем новый ЮРЛ


path('logout/', views.logoutuser, name='logoutuser'),

в файле views создаем переменную logoutuser:
from django.contrib.auth import login, logout - новая функция

def logoutuser(request):
    if request.method == 'POST': --- если метод ПОСТ, то
        logout(request) - выполняет выход пользователя
        return redirect('home') - возвращает на домашнюю страницу 

Далее нам нужно изменить хтмл файл БАЙЗ:

<form action="{% url 'logoutuser' %}" method="POST">
    {% csrf_token %}
    <button type="submit">Logout</button>
</form>


А, ну и создали домашнюю страницу. Все
_________________________________________________________________________________________________
7.8 Вход пользователя Log in

в Urls.py сохдаем новый path для логирования

path('login/', views.loginuser, name='loginuser'),
создаем в темплейтс шаблон хтмл страницы - loginuser.html
дальше в шаблоне прописываем такой код


{% extends 'todo/base.html' %}

{% block content %}


<h1>Login</h1>

<h2>{{ error }}</h2>

<form method="POST">
    {% csrf_token %}
{{form.as_p}}
<button type="submit">Login</button>

</form>

{% endblock %}

Так же кнопки пропишем функциональность кнопок на сайте (в файле base.html):

<a href="{% url 'signupusers' %}">SignUp</a>
<a href="{% url 'loginuser' %}">Login</a>


После этого возвращаемся в файл views.py и создаем функция def loginuser

def loginuser(request):
    if request.method == 'GET':
        return render(request, 'todo/loginuser.html', {'form': AuthenticationForm()})-перекидывает на страницу аутентификации
    else:
        user = authenticate(request, username=request.POST['username'],
                     password=request.POST['password']) - проверяет совместимост ьпароля и логина
        if user is None:
            return render(request, 'todo/loginuser.html', {'form': AuthenticationForm(),
                          'error': 'User name and password did not match'}) -- если проверка не проходит то
выкидывает на страницу с ошибкой 

        else:
            login(request, user) - логинит
            return redirect('currenttodos')- перебрасывает на старницу current

_________________________________________________________________________________________
7.9 Модель ToDo
В этом уроке мы будем рабоать с моделями и админкой
Заходим в файл model.py 
Нам нужно реализовать класс ToDo в котором будут следующие параметры
title, memo, created, datecomplated, important, user

from django.contrib.auth.models import User

class ToDo(models.Model):
	title = models.CharField(max_length=100) -- описание задачи

	memo = models.TextField(blank=True) -- Описание задачи blank = True значит что это поле не обязательно

	created = models.DateTimeField(auto_now_add=True) -- дата когда создана запись(ставится автоматом)

	datecomplated = models.DateTimeField(null=True, blank=True)-- срок выполнения задачи, null-True
ставится потому что неважно когда задача будет выполнена, blank то что поле не обязательное

	important = models.BooleanField(default=False) - важность задачи

	
	user = models.ForeignKey(User, on_delete=models.CASCADE)-- выбор юзера, кто будет реализовывать эту 
задачу, чтобы ее использовать нужно импортировать User(он выше)

	

    def __str__(self): -- добавили для корректности изображения описания
        return self.title


Далее в файле admin.py вносим следующие изменения


from .models import Todo - импорт нашего класса

class TodoAdmin(admin.ModelAdmin):
    readonly_fields = ('created',) - нужно для отображения поля Created (в котором будет отображаться дата создания записи) 



admin.site.register(Todo, TodoAdmin) - класс Todo- наш класс в model.py , TodoAdmin - поле created(исходник в классе ToDo)

_______________________________________________________________________________________
7.10
Создание задач
Нам нужно страница создании задач
в urls.py создаем новый path с названием create

path('create/', views.createtodo, name='createtodo'),

Переходим в views.py и создаем функцию cretetodo и пока ее оставляем
в приложении todo создаем новый файл forms.py 

открываем его и импортируем след библиотеки

from django.forms import ModelForm 
from .models import Todo - наш класс который мы прописывали в моделях 

class TodoForm(ModelForm):  
    class Meta: 
        model = Todo - наш класс
        fields = ['title', 'memo', 'important'] - поля которые мы хотим использовать 


После переходи в файл views.py и прописываем следующее

from .forms import TodoForm

и переходим к созданию функции createtodo

    if request.method == 'GET':
        return render(request, 'todo/createtodo.html', {'form': TodoForm()}) - открывает страницу с формами создания полей задач
    else:
        try:
            form = TodoForm(request.POST) -- пользователь передает созданный задачи сюда и они принимаются
            newtodo = form.save(commit=False) -- тут они сохраняются в БД
            newtodo.user = request.user -- привязка к опредленному пользователю
            newtodo.save() -- сохранит в БД 
            return redirect('currenttodos') - возвращает нас на страницу кюрэнт(потом перепишем)
        except ValueError:  -- тут говнятина( в версии 4, такой
 ошибки быть не может) но мы написали на всякий случай 
            return render(request, 'todo/createtodo.html',
                          {'form': TodoForm(), 'error': 'Bratanchik ti cheto napytal'})

________________________________________________________________________________________________
7.11 список задач

Отображение задач (осуществляются в файле currenttodos)

заходим в views.py изменяем функцию currenttodos
перед этим импортируем Todo
from .models import Todo
todos = Todo.objects.filter(user=request.user, datecomplated__isnull=True) - параметры фильтрации:
		user=request.user - совпадение автора и просматривателя, 
		datecomplated__isnull=True  - проверка на время исполнения


<ul>
    {% for todo in todos %}

    <li>
        {% if todo.important %}<b>{% endif %}{{ todo.title }}{% if todo.important %}</b>{% endif %}- условие,
если пометка имеет отметку важно, то ее выделают жирным шрифтом
        {% if todo.memo %} - {{ todo.memo }}{% endif %}
        </li>

    {% endfor %}
</ul>

и ебанули такой html
__________________________________________________________________________________________________________
7.12 Просмотр и обновление задач
Сначало введем функционал просмотра записей чебурека

path('todo/<int:todo_pk>', views.viewtodo, name='viewtodo'), --<int:todo_pk>- айди записи

Переходим во views.py

def viewtodo(request, todo_pk - то что прописали в path):
 
    todo = get_object_or_404(Todo -импортировали шаблон, pk=todo_pk - ключ,
 user=request.user- привязка к определенному пользователю)

    if request.method == 'GET': -- загружает страницу редактирования имеющейся запси

        form = TodoForm(instance=todo - параметр для работы с уже существующем объектом)
        return render(request, 'todo/details.html', {'todo': todo, 'form': form})
    else: -- тут идет обработка изменения записи
        try:
            form = TodoForm(request.POST - читает ПОСТ запрос, instance=todo)
            form.save() - сохраняет
            return redirect('currenttodos') - возвращяет на страницу с записями
        except ValueError: -- выводит сообщение об ошибке
            return render(request, 'todo/details.html',
                          {'todo': todo, 'form': form, 'error': 'Bad Info'})

Идем в файл datailhtml

{% extends 'todo/base.html' %}

{% block content %}

<h2>{{ error }}</h2> -- выводит ошибку, если она есть

<br>
{{ todo.title }} - загружает название
<br>
{{ todo.memo }} - описание
<form method="POST">
    {% csrf_token %}
{{form.as_p}} - импортируеум форму изменения(создания)
    <button type="submit">Save</button>
</form>

{% endblock %}
____________________________________________________________________________________________
7.13 Удаление и завершение задач
Завершение задачи

В urls.py пишем новый path

path('todo/<int:todo_pk>/complete', views.complatetodo, name='complatetodo'),

Функция похожа на viwstodo, поэтому частично копируем оттуда
from django.utils import timezone

def complatetodo(request, todo_pk):
    todo = get_object_or_404(Todo -импортировали шаблон, pk=todo_pk - ключ,
 user=request.user- привязка к определенному пользователю)
 
    if request.method == 'POST':
        todo.datecomplated = timezone.now() -- нужно ипортировать таймзон
        todo.save() -- сохраняем
        return redirect('currenttodos')-- переводим на старницу текущее

И прописываем такой html в файле details

<form method="POST" action="{% url 'complatetodo' todo.id %}">
    {% csrf_token %}
    <button type="submit">Complete</button>
</form>

Тоже самое делаем с удалением

path('todo/<int:todo_pk>/delete', views.deletetodo, name='deletetodo'),

def deletetodo(request, todo_pk):
    todo = get_object_or_404(Todo, pk=todo_pk, user=request.user)
    if request.method == 'POST':
        todo.delete()
        return redirect('currenttodos')

<form method="POST" action="{% url 'deletetodo' todo.id %}">
    {% csrf_token %}
    <button type="submit">Delete</button>
</form>

________________________________________________________________________________________________





